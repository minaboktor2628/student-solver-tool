name: CI

on:
  pull_request:
  push:
    branches:
      - main
      - dev
      - "ci-*"

jobs:
  check:
    runs-on: ubuntu-latest
    env:
      SKIP_ENV_VALIDATION: true
      NEXT_TELEMETRY_DISABLED: 1
      CI: true
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Next types
        run: pnpm run typegen

      - name: Lint check
        run: pnpm run lint

      - name: Format check
        run: pnpm run format:check

      - name: Type check
        run: pnpm run typecheck

      - name: Unit tests
        run: pnpm run test:ci

  e2e:
    name: E2E (Cypress)
    needs: check
    runs-on: ubuntu-latest

    # Postgres for PrismaAdapter + upsert in Credentials authorize()
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: app
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      CI: true
      SKIP_ENV_VALIDATION: true
      NEXT_TELEMETRY_DISABLED: 1

      # Make NextAuth happy in CI
      NODE_ENV: development # enables Credentials provider
      NEXTAUTH_URL: http://localhost:3000
      AUTH_TRUST_HOST: true # for Auth.js/NextAuth v5 behind proxies
      NEXTAUTH_SECRET: testtesttesttest

      # Coordinator emails used in role derivation
      COORDINATOR_EMAILS: testcoordinator@wpi.edu

      # Prisma connection to the service container
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/app?schema=public
      DIRECT_URL: postgresql://postgres:postgres@localhost:5432/app?schema=public

    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Prepare DB schema
      - name: Prisma migrate
        run: pnpm prisma migrate deploy

      # Run Cypress via the official action; it will:
      # - cache / install the Cypress binary
      # - start dev server
      # - wait for it
      # - run tests headlessly
      - name: Cypress run
        uses: cypress-io/github-action@v6
        with:
          start: pnpm dev
          wait-on: "http://localhost:3000"
          browser: electron
          spec: "cypress/e2e/**/*.cy.{ts,tsx,js,jsx}"

      # Upload videos/screenshots on failure
      - name: Upload Cypress artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-artifacts
          path: |
            cypress/screenshots
            cypress/videos

  docker:
    name: Build & Push Docker image
    runs-on: ubuntu-latest
    needs: check
    if: github.ref == 'refs/heads/main' # only run docker step on main
    permissions:
      contents: read
      packages: write
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }} # ghcr.io/<owner>/<repo>
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata (tags + labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NEXT_PUBLIC_CLIENTVAR=clientvar
          cache-from: type=gha
          cache-to: type=gha,mode=max
