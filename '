"use client";

import { useEffect, useMemo, useState } from "react";
import Editor from "@monaco-editor/react";
import type { OnMount } from "@monaco-editor/react";
import type { EditorFile } from "@/types/editor";
import { useTheme } from "next-themes";
import { LoadingSpinner } from "./loading-spinner";
import {
  ValidationInputSchema,
  type Allocation,
  type AssistantPreferences,
} from "@/types/excel";
import zodToJsonSchema from "zod-to-json-schema";
import React from "react";
import { useRef } from "react";
import { Braces } from "lucide-react";
import { Tabs, TabsList, TabsTrigger } from "./ui/tabs";
import {
  parse,
  getLocation,
  parseTree,
  findNodeAtLocation,
} from "jsonc-parser";
import type * as monacoT from "monaco-editor";
import { defaultPLAHours, defaultTAHours } from "@/lib/constants";
import {
  makeCourseToAssistantMap,
  parsePersonFromKey,
  personKey,
} from "@/lib/validation";

const objectSnippet = (obj: unknown) => JSON.stringify(obj, null, 2);

function registerAllocationSnippets(monaco: typeof monacoT) {
  return monaco.languages.registerCompletionItemProvider("json", {
    triggerCharacters: [" ", "\n"],
    provideCompletionItems(model, position) {
      // only run auto complete for allocation tab
      if (!model.uri.path.endsWith("Allocations")) return { suggestions: [] };

      const word = model.getWordUntilPosition(position);
      const range = new monaco.Range(
        position.lineNumber,
        word.startColumn,
        position.lineNumber,
        word.endColumn,
      );

      // the raw json of the current file
      const text = model.getValue();
      const doc = parse(text, [], {
        allowTrailingComma: true,
        disallowComments: false,
      }) as Allocation[];

      const offset = model.getOffsetAt(position);
      const loc = getLocation(text, offset);
      const [allocationObjectIndex, currentKeyNameInObject] = loc.path;
      const idx = Number(allocationObjectIndex);
      const currentAllocation = Number.isFinite(idx) ? doc[idx] : undefined;

      const suggestions: monacoT.languages.CompletionItem[] = [];
      const course = currentAllocation?.Section?.Course;

      if (
        (currentKeyNameInObject === "TAs" ||
          currentKeyNameInObject === "PLAs") &&
        course
      ) {
        const assignedAssistantSet = new Set(
          doc.flatMap((a) => a[currentKeyNameInObject]).map(personKey),
        );

        const uri = monaco.Uri.parse(`${currentKeyNameInObject} Preferences`);
        const model = monaco.editor.getModel(uri);
        if (!model) return { suggestions: [] };

        const courseMap = makeCourseToAssistantMap(
          parse(model.getValue(), [], {
            allowTrailingComma: true,
            disallowComments: false,
          }) as AssistantPreferences[],
        );

        const availableAssitants = courseMap[course] ?? [];

        const unassignedAssistants = [...availableAssitants]
          .map(parsePersonFromKey)
          .filter((p) => !assignedAssistantSet.has(personKey(p)));

        for (const { First, Last } of unassignedAssistants) {
          const roleSingular = currentKeyNameInObject.slice(0, -1); // "TA" or "PLA"
          suggestions.push({
            label: `${roleSingular}: ${First} ${Last}`,
            kind: monaco.languages.CompletionItemKind.Snippet,
            insertTextRules:
              monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
            insertText: objectSnippet({
              First,
              Last,
              Hours:
                currentKeyNameInObject === "TAs"
                  ? defaultTAHours()
                  : defaultPLAHours(),
              Locked: false,
            }),
            documentation: `Insert ${roleSingular} ${First} ${Last} for ${course}`,
            range,
            sortText: "0", // show above the generic snippet
          });
        }
      }

      suggestions.push({
        label: `Add a custom assistant`,
        kind: monaco.languages.CompletionItemKind.Snippet,
        insertTextRules:
          monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
        insertText: objectSnippet({
          First: "${1:First}",
          Last: "${2:Last}",
          Hours: defaultPLAHours(),
          Locked: false,
        }),
        documentation: `Insert a custom assistant object with placeholders`,
        range,
      });

      return { suggestions };
    },
  });
}

const VALIDATOR_OWNER = "alloc-validator";

function validateAllocationsModel(
  allocModel: monacoT.editor.ITextModel,
  monaco: typeof monacoT,
) {
  const text = allocModel.getValue();
  const tree = parseTree(text);
  if (!tree) {
    monaco.editor.setModelMarkers(allocModel, VALIDATOR_OWNER, []);
    return;
  }

  const doc = parse(text, [], {
    allowTrailingComma: true,
    disallowComments: false,
  }) as Allocation[];

  // Load preference models
  const taUri = monaco.Uri.parse("TAs Preferences");
  const plaUri = monaco.Uri.parse("PLAs Preferences");
  const taPrefModel = monaco.editor.getModel(taUri);
  const plaPrefModel = monaco.editor.getModel(plaUri);

  // If weâ€™re missing a preferences model, clear markers and bail gracefully
  if (!taPrefModel || !plaPrefModel) {
    monaco.editor.setModelMarkers(allocModel, VALIDATOR_OWNER, []);
    return;
  }

  const taMap = makeCourseToAssistantMap(
    parse(taPrefModel.getValue(), [], {
      allowTrailingComma: true,
      disallowComments: false,
    }) as AssistantPreferences[],
  );
  const plaMap = makeCourseToAssistantMap(
    parse(plaPrefModel.getValue(), [], {
      allowTrailingComma: true,
      disallowComments: false,
    }) as AssistantPreferences[],
  );

  const markers: monacoT.editor.IMarkerData[] = [];

  const rowNode = (idx: number) => findNodeAtLocation(tree, [idx]);

  const pos = (offset: number) => allocModel.getPositionAt(offset);

  const pushErr = (node: any, message: string) => {
    if (!node) return;
    const start = pos(node.offset);
    const end = pos(node.offset + node.length);
    markers.push({
      severity: monaco.MarkerSeverity.Error,
      message,
      startLineNumber: start.lineNumber,
      startColumn: start.column,
      endLineNumber: end.lineNumber,
      endColumn: end.column,
      source: "Allocation rules",
      code: "alloc/not-in-suggestions",
    });
  };

  doc.forEach((alloc, idx) => {
    const course = alloc?.Section?.Course;
    if (!course) return;

    const allowedTAs = new Set(
      (taMap[course] ?? []).map((k) => personKey(parsePersonFromKey(k))),
    );
    const allowedPLAs = new Set(
      (plaMap[course] ?? []).map((k) => personKey(parsePersonFromKey(k))),
    );

    const row = rowNode(idx);
    const tasN = row && findNodeAtLocation(row, ["TAs"]);
    const plasN = row && findNodeAtLocation(row, ["PLAs"]);

    const check = (
      arr: { First: string; Last: string }[] | undefined,
      arrNode: any,
      label: "TA" | "PLA",
      allowed: Set<string>,
    ) => {
      if (!arr || !arrNode?.children) return;
      arr.forEach((p, i) => {
        const ok = allowed.has(personKey({ First: p.First, Last: p.Last }));
        if (!ok)
          pushErr(
            arrNode.children?.[i],
            `${label} must be one of the suggested assistants for course ${course}.`,
          );
      });
    };

    check(alloc.TAs, tasN, "TA", allowedTAs);
    check(alloc.PLAs, plasN, "PLA", allowedPLAs);
  });

  monaco.editor.setModelMarkers(allocModel, VALIDATOR_OWNER, markers);
}

// Re-run validation whenever allocations or preference models change
function wireAllocationValidation(monaco: typeof monacoT) {
  const allocUri = monaco.Uri.parse("Allocations");
  const allocModel = monaco.editor.getModel(allocUri);
  if (!allocModel) return () => {};

  const rerun = () => validateAllocationsModel(allocModel, monaco);

  const disposers: monacoT.IDisposable[] = [];
  disposers.push(allocModel.onDidChangeContent(rerun));

  const taModel = monaco.editor.getModel(monaco.Uri.parse("TAs Preferences"));
  const plaModel = monaco.editor.getModel(monaco.Uri.parse("PLAs Preferences"));
  taModel && disposers.push(taModel.onDidChangeContent(rerun));
  plaModel && disposers.push(plaModel.onDidChangeContent(rerun));

  // initial run
  rerun();

  return () => disposers.forEach((d) => d.dispose());
}

type ErrorCountMap = Record<string, number>;
type Monaco = Parameters<OnMount>[1];
interface Props {
  files: EditorFile[];
  onChange: (files: EditorFile[]) => void;
  onValidityChange: (allValid: boolean) => void;
}

type Shape = typeof ValidationInputSchema.shape;
type ShapeKey = keyof Shape;
const toSchemaEntries = () =>
  (
    Object.entries(ValidationInputSchema.shape) as [ShapeKey, Shape[ShapeKey]][]
  ).map(([name, schema]) => ({
    fileMatch: [name],
    uri: `inmemory://schemas/${name}.schema.json`,
    schema: zodToJsonSchema(schema, { name }),
  }));

export default function JsonEditor({
  files,
  onChange,
  onValidityChange,
}: Props) {
  const { resolvedTheme } = useTheme();

  // active file is keyed by filename (tabs value)
  const initial = files[files.length - 1]?.filename ?? "";
  const [activeFilename, setActiveFilename] = useState(initial);
  const activeFile = useMemo(
    () => files.find((f) => f.filename === activeFilename) ?? files[0],
    [files, activeFilename],
  );

  // keep Monaco instance so we can convert filenames -> URIs in render
  const monacoRef = useRef<Monaco | null>(null);
  const recomputeRef = useRef<(() => void) | null>(null);
  const [errorCounts, setErrorCounts] = useState<ErrorCountMap>({});

  const handleChange = (value?: string) => {
    const next = files.map((f) =>
      f.filename === activeFile?.filename ? { ...f, code: value ?? "" } : f,
    );
    onChange(next);
  };

  const onMount: OnMount = (editor, monaco) => {
    monacoRef.current = monaco;

    monaco.languages.json.jsonDefaults.setDiagnosticsOptions({
      validate: true,
      allowComments: false,
      enableSchemaRequest: false,
      trailingCommas: "error",
      schemas: toSchemaEntries(),
      schemaValidation: "error",
    });

    files.forEach((f) => {
      const uri = monaco.Uri.parse(f.filename);
      return (
        monaco.editor.getModel(uri) ??
        monaco.editor.createModel(f.code ?? "", "json", uri)
      );
    });

    const recompute = () => {
      const counts: Record<string, number> = {};
      const models = monaco.editor
        .getModels()
        .filter((m) => m.getLanguageId() === "json");

      for (const m of models) {
        const markers = monaco.editor.getModelMarkers({ resource: m.uri });
        counts[m.uri.toString()] = markers.filter(
          (x) => x.severity === monaco.MarkerSeverity.Error,
        ).length;
      }

      setErrorCounts(counts);
      onValidityChange(!Object.values(counts).some((n) => n > 0));
    };

    recomputeRef.current = recompute;
    const d0 = registerAllocationSnippets(monaco);
    const d1 = monaco.editor.onDidChangeMarkers(recompute);
    const d2 = editor.onDidChangeModelContent(recompute);

    editor.onDidDispose(() => {
      d0.dispose();
      d1.dispose();
      d2.dispose();
    });

    // run once initially
    recompute();
  };

  useEffect(() => {
    const monaco = monacoRef.current;
    if (!monaco) return;

    const keep = new Set<string>();

    for (const f of files) {
      const uri = monaco.Uri.parse(f.filename);
      keep.add(uri.toString());

      let model = monaco.editor.getModel(uri);
      if (!model) {
        model = monaco.editor.createModel(f.code ?? "", "json", uri);
      } else if (model.getValue() !== (f.code ?? "")) {
        model.setValue(f.code ?? ""); // triggers JSON worker re-validate
      }
    }

    // dispose models that are no longer represented in props
    for (const m of monaco.editor.getModels()) {
      if (m.getLanguageId() !== "json") continue;
      if (!keep.has(m.uri.toString())) m.dispose();
    }

    // force a recompute right after batch updates
    recomputeRef.current?.();
  }, [files]);

  const uriKeyFor = (filename: string) =>
    monacoRef.current?.Uri.parse(filename).toString() ?? filename;

  return (
    <div className="flex h-full w-full flex-col">
      <Tabs
        value={activeFile?.filename ?? ""}
        onValueChange={setActiveFilename}
        className="mr-1 flex h-full flex-col"
      >
        <TabsList className="w-full">
          {files.map((f) => {
            const key = uriKeyFor(f.filename);
            const errCount = errorCounts[key] ?? 0;
            const hasErrors = errCount > 0;

            return (
              <TabsTrigger
                key={f.filename}
                value={f.filename}
                title={f.filename}
                className="cursor-pointer"
              >
                <Braces className="inline size-4" />
                <span
                  className={`${hasErrors ? "underline decoration-red-600 decoration-wavy underline-offset-2" : ""} truncate`}
                >
                  {f.filename}.json
                </span>
                {hasErrors && (
                  <span className="text-destructive ml-1 rounded bg-red-600/30 px-1.5 py-0.5 text-[10px] leading-none">
                    {errCount}
                  </span>
                )}
              </TabsTrigger>
            );
          })}
        </TabsList>

        <div className="border-input min-h-0 flex-1 overflow-hidden rounded-md border">
          <Editor
            path={activeFile?.filename}
            height="100%"
            loading={<LoadingSpinner />}
            theme={resolvedTheme === "dark" ? "vs-dark" : resolvedTheme}
            language={activeFile?.language ?? "json"}
            value={activeFile?.code ?? ""}
            onChange={handleChange}
            onMount={onMount}
            className="h-full"
            options={{
              minimap: { enabled: true },
              lineNumbers: "on",
              wordWrap: "on",
              automaticLayout: true,
              fixedOverflowWidgets: true,
              padding: { top: 10, bottom: 10 },
              glyphMargin: true,
              formatOnType: true,
              formatOnPaste: true,
            }}
          />
        </div>
      </Tabs>
    </div>
  );
}
